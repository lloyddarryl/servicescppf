{"ast":null,"code":"// services/urlHelper.js\n\nexport const urlHelper = {\n  // Obtenir le type d'utilisateur depuis le token ou localStorage\n  getUserType: () => {\n    const userType = localStorage.getItem('user_type');\n    return userType || 'actif'; // par défaut actif\n  },\n  // Construire l'URL selon le type d'utilisateur\n  buildUrl: endpoint => {\n    const userType = urlHelper.getUserType();\n    const baseUrl = 'http://localhost:8000/api';\n\n    // Routes communes (sans préfixe de type)\n    const commonRoutes = ['/auth/', '/profile/', '/dashboard'];\n\n    // Vérifier si c'est une route commune\n    const isCommonRoute = commonRoutes.some(route => endpoint.startsWith(route));\n    if (isCommonRoute) {\n      return `${baseUrl}${endpoint}`;\n    }\n\n    // Routes spécifiques selon le type d'utilisateur\n    const userPrefix = userType === 'retraite' ? 'retraites' : 'actifs';\n\n    // Supprimer le slash initial si présent\n    const cleanEndpoint = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint;\n    return `${baseUrl}/${userPrefix}/${cleanEndpoint}`;\n  },\n  // URLs spécifiques pour chaque type d'utilisateur\n  urls: {\n    // URLs communes\n    auth: {\n      logout: '/auth/logout',\n      user: '/auth/user',\n      verify: '/auth/verify'\n    },\n    profile: {\n      show: '/profile',\n      update: '/profile',\n      changePassword: '/profile/password'\n    },\n    // URLs pour actifs\n    actifs: {\n      dashboard: '/dashboard',\n      attestations: '/attestations',\n      prestations: '/prestations',\n      cotisations: '/cotisations',\n      carriere: '/carriere',\n      profil: '/profil',\n      documents: '/documents',\n      notifications: '/notifications'\n    },\n    // URLs pour retraités\n    retraites: {\n      dashboard: '/dashboard',\n      pension: '/pension',\n      pensionHistorique: '/pension/historique',\n      certificatsVie: '/certificats-vie',\n      attestations: '/attestations',\n      historique: '/historique',\n      suiviPaiements: '/suivi-paiements',\n      profil: '/profil',\n      documents: '/documents',\n      notifications: '/notifications'\n    }\n  }\n};\n\n// Fonction utilitaire pour faire des appels API\nexport const apiCall = async (endpoint, options = {}) => {\n  const url = urlHelper.buildUrl(endpoint);\n  const defaultOptions = {\n    headers: {\n      'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    }\n  };\n  const mergedOptions = {\n    ...defaultOptions,\n    ...options,\n    headers: {\n      ...defaultOptions.headers,\n      ...options.headers\n    }\n  };\n  return fetch(url, mergedOptions);\n};","map":{"version":3,"names":["urlHelper","getUserType","userType","localStorage","getItem","buildUrl","endpoint","baseUrl","commonRoutes","isCommonRoute","some","route","startsWith","userPrefix","cleanEndpoint","substring","urls","auth","logout","user","verify","profile","show","update","changePassword","actifs","dashboard","attestations","prestations","cotisations","carriere","profil","documents","notifications","retraites","pension","pensionHistorique","certificatsVie","historique","suiviPaiements","apiCall","options","url","defaultOptions","headers","mergedOptions","fetch"],"sources":["C:/Users/invite/Desktop/servicescppf/frontend/src/services/urlHelper.js"],"sourcesContent":["// services/urlHelper.js\r\n\r\nexport const urlHelper = {\r\n  // Obtenir le type d'utilisateur depuis le token ou localStorage\r\n  getUserType: () => {\r\n    const userType = localStorage.getItem('user_type');\r\n    return userType || 'actif'; // par défaut actif\r\n  },\r\n\r\n  // Construire l'URL selon le type d'utilisateur\r\n  buildUrl: (endpoint) => {\r\n    const userType = urlHelper.getUserType();\r\n    const baseUrl = 'http://localhost:8000/api';\r\n    \r\n    // Routes communes (sans préfixe de type)\r\n    const commonRoutes = [\r\n      '/auth/',\r\n      '/profile/',\r\n      '/dashboard' \r\n    ];\r\n    \r\n    // Vérifier si c'est une route commune\r\n    const isCommonRoute = commonRoutes.some(route => endpoint.startsWith(route));\r\n    \r\n    if (isCommonRoute) {\r\n      return `${baseUrl}${endpoint}`;\r\n    }\r\n    \r\n    // Routes spécifiques selon le type d'utilisateur\r\n    const userPrefix = userType === 'retraite' ? 'retraites' : 'actifs';\r\n    \r\n    // Supprimer le slash initial si présent\r\n    const cleanEndpoint = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint;\r\n    \r\n    return `${baseUrl}/${userPrefix}/${cleanEndpoint}`;\r\n  },\r\n\r\n  // URLs spécifiques pour chaque type d'utilisateur\r\n  urls: {\r\n    // URLs communes\r\n    auth: {\r\n      logout: '/auth/logout',\r\n      user: '/auth/user',\r\n      verify: '/auth/verify'\r\n    },\r\n    profile: {\r\n      show: '/profile',\r\n      update: '/profile',\r\n      changePassword: '/profile/password'\r\n    },\r\n    \r\n    // URLs pour actifs\r\n    actifs: {\r\n      dashboard: '/dashboard',\r\n      attestations: '/attestations',\r\n      prestations: '/prestations',\r\n      cotisations: '/cotisations',\r\n      carriere: '/carriere',\r\n      profil: '/profil',\r\n      documents: '/documents',\r\n      notifications: '/notifications'\r\n    },\r\n    \r\n    // URLs pour retraités\r\n    retraites: {\r\n      dashboard: '/dashboard',\r\n      pension: '/pension',\r\n      pensionHistorique: '/pension/historique',\r\n      certificatsVie: '/certificats-vie',\r\n      attestations: '/attestations',\r\n      historique: '/historique',\r\n      suiviPaiements: '/suivi-paiements',\r\n      profil: '/profil',\r\n      documents: '/documents',\r\n      notifications: '/notifications'\r\n    }\r\n  }\r\n};\r\n\r\n// Fonction utilitaire pour faire des appels API\r\nexport const apiCall = async (endpoint, options = {}) => {\r\n  const url = urlHelper.buildUrl(endpoint);\r\n  \r\n  const defaultOptions = {\r\n    headers: {\r\n      'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n  };\r\n  \r\n  const mergedOptions = {\r\n    ...defaultOptions,\r\n    ...options,\r\n    headers: {\r\n      ...defaultOptions.headers,\r\n      ...options.headers\r\n    }\r\n  };\r\n  \r\n  return fetch(url, mergedOptions);\r\n};"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,SAAS,GAAG;EACvB;EACAC,WAAW,EAAEA,CAAA,KAAM;IACjB,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAClD,OAAOF,QAAQ,IAAI,OAAO,CAAC,CAAC;EAC9B,CAAC;EAED;EACAG,QAAQ,EAAGC,QAAQ,IAAK;IACtB,MAAMJ,QAAQ,GAAGF,SAAS,CAACC,WAAW,CAAC,CAAC;IACxC,MAAMM,OAAO,GAAG,2BAA2B;;IAE3C;IACA,MAAMC,YAAY,GAAG,CACnB,QAAQ,EACR,WAAW,EACX,YAAY,CACb;;IAED;IACA,MAAMC,aAAa,GAAGD,YAAY,CAACE,IAAI,CAACC,KAAK,IAAIL,QAAQ,CAACM,UAAU,CAACD,KAAK,CAAC,CAAC;IAE5E,IAAIF,aAAa,EAAE;MACjB,OAAO,GAAGF,OAAO,GAAGD,QAAQ,EAAE;IAChC;;IAEA;IACA,MAAMO,UAAU,GAAGX,QAAQ,KAAK,UAAU,GAAG,WAAW,GAAG,QAAQ;;IAEnE;IACA,MAAMY,aAAa,GAAGR,QAAQ,CAACM,UAAU,CAAC,GAAG,CAAC,GAAGN,QAAQ,CAACS,SAAS,CAAC,CAAC,CAAC,GAAGT,QAAQ;IAEjF,OAAO,GAAGC,OAAO,IAAIM,UAAU,IAAIC,aAAa,EAAE;EACpD,CAAC;EAED;EACAE,IAAI,EAAE;IACJ;IACAC,IAAI,EAAE;MACJC,MAAM,EAAE,cAAc;MACtBC,IAAI,EAAE,YAAY;MAClBC,MAAM,EAAE;IACV,CAAC;IACDC,OAAO,EAAE;MACPC,IAAI,EAAE,UAAU;MAChBC,MAAM,EAAE,UAAU;MAClBC,cAAc,EAAE;IAClB,CAAC;IAED;IACAC,MAAM,EAAE;MACNC,SAAS,EAAE,YAAY;MACvBC,YAAY,EAAE,eAAe;MAC7BC,WAAW,EAAE,cAAc;MAC3BC,WAAW,EAAE,cAAc;MAC3BC,QAAQ,EAAE,WAAW;MACrBC,MAAM,EAAE,SAAS;MACjBC,SAAS,EAAE,YAAY;MACvBC,aAAa,EAAE;IACjB,CAAC;IAED;IACAC,SAAS,EAAE;MACTR,SAAS,EAAE,YAAY;MACvBS,OAAO,EAAE,UAAU;MACnBC,iBAAiB,EAAE,qBAAqB;MACxCC,cAAc,EAAE,kBAAkB;MAClCV,YAAY,EAAE,eAAe;MAC7BW,UAAU,EAAE,aAAa;MACzBC,cAAc,EAAE,kBAAkB;MAClCR,MAAM,EAAE,SAAS;MACjBC,SAAS,EAAE,YAAY;MACvBC,aAAa,EAAE;IACjB;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMO,OAAO,GAAG,MAAAA,CAAOlC,QAAQ,EAAEmC,OAAO,GAAG,CAAC,CAAC,KAAK;EACvD,MAAMC,GAAG,GAAG1C,SAAS,CAACK,QAAQ,CAACC,QAAQ,CAAC;EAExC,MAAMqC,cAAc,GAAG;IACrBC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUzC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,EAAE;MAC/D,cAAc,EAAE,kBAAkB;MAClC,QAAQ,EAAE;IACZ;EACF,CAAC;EAED,MAAMyC,aAAa,GAAG;IACpB,GAAGF,cAAc;IACjB,GAAGF,OAAO;IACVG,OAAO,EAAE;MACP,GAAGD,cAAc,CAACC,OAAO;MACzB,GAAGH,OAAO,CAACG;IACb;EACF,CAAC;EAED,OAAOE,KAAK,CAACJ,GAAG,EAAEG,aAAa,CAAC;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}