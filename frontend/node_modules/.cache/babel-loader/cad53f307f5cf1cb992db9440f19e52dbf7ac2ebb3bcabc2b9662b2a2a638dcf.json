{"ast":null,"code":"// services/urlHelper.js\nexport const urlHelper={// Obtenir le type d'utilisateur depuis le token ou localStorage\ngetUserType:()=>{const userType=localStorage.getItem('user_type');return userType||'actif';// par défaut actif\n},// Construire l'URL selon le type d'utilisateur\nbuildUrl:endpoint=>{const userType=urlHelper.getUserType();const baseUrl='http://localhost:8000/api';// Routes communes (sans préfixe de type)\nconst commonRoutes=['/auth/','/profile/','/dashboard'// route générale qui redirige\n];// Vérifier si c'est une route commune\nconst isCommonRoute=commonRoutes.some(route=>endpoint.startsWith(route));if(isCommonRoute){return`${baseUrl}${endpoint}`;}// Routes spécifiques selon le type d'utilisateur\nconst userPrefix=userType==='retraite'?'retraites':'actifs';// Supprimer le slash initial si présent\nconst cleanEndpoint=endpoint.startsWith('/')?endpoint.substring(1):endpoint;return`${baseUrl}/${userPrefix}/${cleanEndpoint}`;},// URLs spécifiques pour chaque type d'utilisateur\nurls:{// URLs communes\nauth:{logout:'/auth/logout',user:'/auth/user',verify:'/auth/verify'},profile:{show:'/profile',update:'/profile',changePassword:'/profile/password'},// URLs pour actifs\nactifs:{dashboard:'/dashboard',attestations:'/attestations',prestations:'/prestations',cotisations:'/cotisations',carriere:'/carriere',profil:'/profil',documents:'/documents',notifications:'/notifications'},// URLs pour retraités\nretraites:{dashboard:'/dashboard',pension:'/pension',pensionHistorique:'/pension/historique',certificatsVie:'/certificats-vie',attestations:'/attestations',historique:'/historique',suiviPaiements:'/suivi-paiements',profil:'/profil',documents:'/documents',notifications:'/notifications'}}};// Fonction utilitaire pour faire des appels API\nexport const apiCall=async function(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const url=urlHelper.buildUrl(endpoint);const defaultOptions={headers:{'Authorization':`Bearer ${localStorage.getItem('auth_token')}`,'Content-Type':'application/json','Accept':'application/json'}};const mergedOptions={...defaultOptions,...options,headers:{...defaultOptions.headers,...options.headers}};return fetch(url,mergedOptions);};","map":{"version":3,"names":["urlHelper","getUserType","userType","localStorage","getItem","buildUrl","endpoint","baseUrl","commonRoutes","isCommonRoute","some","route","startsWith","userPrefix","cleanEndpoint","substring","urls","auth","logout","user","verify","profile","show","update","changePassword","actifs","dashboard","attestations","prestations","cotisations","carriere","profil","documents","notifications","retraites","pension","pensionHistorique","certificatsVie","historique","suiviPaiements","apiCall","options","arguments","length","undefined","url","defaultOptions","headers","mergedOptions","fetch"],"sources":["C:/Users/invite/Documents/servicescppf/frontend/src/services/urlHelper.js"],"sourcesContent":["// services/urlHelper.js\r\nexport const urlHelper = {\r\n  // Obtenir le type d'utilisateur depuis le token ou localStorage\r\n  getUserType: () => {\r\n    const userType = localStorage.getItem('user_type');\r\n    return userType || 'actif'; // par défaut actif\r\n  },\r\n\r\n  // Construire l'URL selon le type d'utilisateur\r\n  buildUrl: (endpoint) => {\r\n    const userType = urlHelper.getUserType();\r\n    const baseUrl = 'http://localhost:8000/api';\r\n    \r\n    // Routes communes (sans préfixe de type)\r\n    const commonRoutes = [\r\n      '/auth/',\r\n      '/profile/',\r\n      '/dashboard' // route générale qui redirige\r\n    ];\r\n    \r\n    // Vérifier si c'est une route commune\r\n    const isCommonRoute = commonRoutes.some(route => endpoint.startsWith(route));\r\n    \r\n    if (isCommonRoute) {\r\n      return `${baseUrl}${endpoint}`;\r\n    }\r\n    \r\n    // Routes spécifiques selon le type d'utilisateur\r\n    const userPrefix = userType === 'retraite' ? 'retraites' : 'actifs';\r\n    \r\n    // Supprimer le slash initial si présent\r\n    const cleanEndpoint = endpoint.startsWith('/') ? endpoint.substring(1) : endpoint;\r\n    \r\n    return `${baseUrl}/${userPrefix}/${cleanEndpoint}`;\r\n  },\r\n\r\n  // URLs spécifiques pour chaque type d'utilisateur\r\n  urls: {\r\n    // URLs communes\r\n    auth: {\r\n      logout: '/auth/logout',\r\n      user: '/auth/user',\r\n      verify: '/auth/verify'\r\n    },\r\n    profile: {\r\n      show: '/profile',\r\n      update: '/profile',\r\n      changePassword: '/profile/password'\r\n    },\r\n    \r\n    // URLs pour actifs\r\n    actifs: {\r\n      dashboard: '/dashboard',\r\n      attestations: '/attestations',\r\n      prestations: '/prestations',\r\n      cotisations: '/cotisations',\r\n      carriere: '/carriere',\r\n      profil: '/profil',\r\n      documents: '/documents',\r\n      notifications: '/notifications'\r\n    },\r\n    \r\n    // URLs pour retraités\r\n    retraites: {\r\n      dashboard: '/dashboard',\r\n      pension: '/pension',\r\n      pensionHistorique: '/pension/historique',\r\n      certificatsVie: '/certificats-vie',\r\n      attestations: '/attestations',\r\n      historique: '/historique',\r\n      suiviPaiements: '/suivi-paiements',\r\n      profil: '/profil',\r\n      documents: '/documents',\r\n      notifications: '/notifications'\r\n    }\r\n  }\r\n};\r\n\r\n// Fonction utilitaire pour faire des appels API\r\nexport const apiCall = async (endpoint, options = {}) => {\r\n  const url = urlHelper.buildUrl(endpoint);\r\n  \r\n  const defaultOptions = {\r\n    headers: {\r\n      'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\r\n      'Content-Type': 'application/json',\r\n      'Accept': 'application/json',\r\n    },\r\n  };\r\n  \r\n  const mergedOptions = {\r\n    ...defaultOptions,\r\n    ...options,\r\n    headers: {\r\n      ...defaultOptions.headers,\r\n      ...options.headers\r\n    }\r\n  };\r\n  \r\n  return fetch(url, mergedOptions);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}