{"ast":null,"code":"import axios from 'axios';\n\n// Configuration de base de l'API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\nconst WEB_BASE_URL = process.env.REACT_APP_WEB_URL || 'http://localhost:8000'; // Nouvelle variable\n\n// Créer une instance axios\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'X-Requested-With': 'XMLHttpRequest'\n  }\n});\n\n// Variable pour tracker si le CSRF cookie a été récupéré\nlet csrfInitialized = false;\n\n// Fonction pour initialiser le CSRF token\nconst initializeCsrf = async () => {\n  if (csrfInitialized) return;\n  try {\n    await axios.get(`${WEB_BASE_URL}/sanctum/csrf-cookie`, {\n      withCredentials: true\n    });\n    csrfInitialized = true;\n  } catch (error) {\n    console.error('Erreur CSRF initialization:', error);\n    // Ne pas bloquer si le CSRF échoue\n  }\n};\n\n// Intercepteur pour ajouter le token d'authentification\napi.interceptors.request.use(async config => {\n  var _config$method;\n  // Initialiser CSRF pour les requêtes POST/PUT/DELETE\n  if (['post', 'put', 'delete', 'patch'].includes((_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toLowerCase())) {\n    await initializeCsrf();\n  }\n  const token = localStorage.getItem('auth_token') || localStorage.getItem('setup_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Intercepteur pour gérer les réponses et erreurs\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3, _error$response4;\n  // Gestion des erreurs d'authentification\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expiré ou invalide\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('setup_token');\n    localStorage.removeItem('user_data');\n\n    // Rediriger vers la page de connexion si on n'y est pas déjà\n    if (!window.location.pathname.includes('/login')) {\n      window.location.href = '/services';\n    }\n  }\n\n  // Gestion des erreurs CSRF (419)\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 419) {\n    console.log('Erreur CSRF, réinitialisation...');\n    csrfInitialized = false;\n    // Optionnel : retry automatique de la requête\n  }\n\n  // Gestion des erreurs de validation (422)\n  if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 422) {\n    console.error('Erreurs de validation:', error.response.data.errors);\n  }\n\n  // Gestion des erreurs serveur (500)\n  if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) >= 500) {\n    console.error('Erreur serveur:', error.response.data);\n  }\n  return Promise.reject(error);\n});\n\n// Services d'authentification (reste identique mais avec les bonnes routes)\nexport const authService = {\n  // Première connexion pour les agents actifs\n  firstLoginActifs: data => api.post('/auth/first-login/actifs', data),\n  // Première connexion pour les retraités\n  firstLoginRetraites: data => api.post('/auth/first-login/retraites', data),\n  // Configuration du profil après première connexion\n  setupProfile: data => api.post('/auth/setup-profile', data),\n  // Connexion standard\n  standardLogin: data => api.post('/auth/standard-login', data),\n  // Déconnexion\n  logout: () => api.post('/auth/logout'),\n  // Vérifier le token\n  verifyToken: () => api.get('/auth/verify'),\n  // Obtenir les informations de l'utilisateur connecté\n  getCurrentUser: () => api.get('/auth/user'),\n  // CORRECTION : Routes auth pour la vérification pendant le setup\n  verifyPhone: data => api.post('/auth/verify-phone-setup', data),\n  resendVerification: () => api.post('/auth/resend-verification-setup')\n};\n\n// Services utilisateur\nexport const userService = {\n  // Obtenir le profil utilisateur\n  getProfile: () => api.get('/user/profile'),\n  // Mettre à jour le profil\n  updateProfile: data => api.put('/user/profile', data),\n  // Changer le mot de passe\n  changePassword: data => api.put('/user/password', data)\n};\n\n// Services pour les agents actifs\nexport const agentService = {\n  // Obtenir le dashboard\n  getDashboard: () => api.get('/agent/dashboard'),\n  // Obtenir les attestations\n  getAttestations: () => api.get('/agent/attestations'),\n  // Demander une attestation\n  requestAttestation: data => api.post('/agent/attestations', data),\n  // Obtenir les prestations familiales\n  getPrestations: () => api.get('/agent/prestations'),\n  // Obtenir l'historique des cotisations\n  getCotisations: () => api.get('/agent/cotisations')\n};\n\n// Services pour les retraités\nexport const retraiteService = {\n  // Obtenir le dashboard\n  getDashboard: () => api.get('/retraite/dashboard'),\n  // Obtenir les informations de pension\n  getPensionInfo: () => api.get('/retraite/pension'),\n  // Obtenir les certificats de vie\n  getCertificatsVie: () => api.get('/retraite/certificats-vie'),\n  // Soumettre un certificat de vie\n  submitCertificatVie: data => api.post('/retraite/certificats-vie', data),\n  // Obtenir l'historique professionnel\n  getHistorique: () => api.get('/retraite/historique')\n};\n\n// Utilitaires\nexport const utils = {\n  // Formater les erreurs de validation\n  formatValidationErrors: errors => {\n    const formattedErrors = {};\n    for (const field in errors) {\n      formattedErrors[field] = errors[field][0]; // Prendre le premier message d'erreur\n    }\n    return formattedErrors;\n  },\n  // Vérifier si l'utilisateur est connecté\n  isAuthenticated: () => {\n    const token = localStorage.getItem('auth_token');\n    return !!token;\n  },\n  // Obtenir les données utilisateur stockées\n  getUserData: () => {\n    const userData = localStorage.getItem('user_data');\n    return userData ? JSON.parse(userData) : null;\n  },\n  // Stocker les données utilisateur\n  setUserData: userData => {\n    localStorage.setItem('user_data', JSON.stringify(userData));\n  },\n  // Nettoyer les données de session\n  clearSession: () => {\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('setup_token');\n    localStorage.removeItem('user_data');\n  },\n  // Formater les numéros de téléphone\n  formatPhoneNumber: phone => {\n    if (!phone) return '';\n    // Supprimer tous les caractères non numériques\n    const cleaned = phone.replace(/\\D/g, '');\n    // Ajouter l'indicatif +241 si nécessaire\n    if (cleaned.length === 8 || cleaned.length === 9) {\n      return `+241${cleaned}`;\n    }\n    return phone;\n  },\n  // Valider le format du matricule solde\n  validateMatriculeSolde: matricule => {\n    return /^[0-9]{6}[A-Z]$/.test(matricule);\n  },\n  // Valider le format du numéro de pension\n  validateNumeroPension: numero => {\n    return /^[0-9]+$/.test(numero);\n  },\n  // Formater les montants en FCFA\n  formatCurrency: amount => {\n    if (!amount) return '0 FCFA';\n    return new Intl.NumberFormat('fr-FR', {\n      style: 'currency',\n      currency: 'XAF',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(amount).replace('XAF', 'FCFA');\n  },\n  // Formater les dates\n  formatDate: date => {\n    if (!date) return '';\n    return new Date(date).toLocaleDateString('fr-FR', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  },\n  // Calculer l'âge\n  calculateAge: birthDate => {\n    if (!birthDate) return 0;\n    const today = new Date();\n    const birth = new Date(birthDate);\n    let age = today.getFullYear() - birth.getFullYear();\n    const monthDiff = today.getMonth() - birth.getMonth();\n    if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birth.getDate()) {\n      age--;\n    }\n    return age;\n  }\n};\n\n// Export par défaut\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","WEB_BASE_URL","REACT_APP_WEB_URL","api","create","baseURL","withCredentials","headers","csrfInitialized","initializeCsrf","get","error","console","interceptors","request","use","config","_config$method","includes","method","toLowerCase","token","localStorage","getItem","Authorization","Promise","reject","response","_error$response","_error$response2","_error$response3","_error$response4","status","removeItem","window","location","pathname","href","log","data","errors","authService","firstLoginActifs","post","firstLoginRetraites","setupProfile","standardLogin","logout","verifyToken","getCurrentUser","verifyPhone","resendVerification","userService","getProfile","updateProfile","put","changePassword","agentService","getDashboard","getAttestations","requestAttestation","getPrestations","getCotisations","retraiteService","getPensionInfo","getCertificatsVie","submitCertificatVie","getHistorique","utils","formatValidationErrors","formattedErrors","field","isAuthenticated","getUserData","userData","JSON","parse","setUserData","setItem","stringify","clearSession","formatPhoneNumber","phone","cleaned","replace","length","validateMatriculeSolde","matricule","test","validateNumeroPension","numero","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatDate","date","Date","toLocaleDateString","year","month","day","calculateAge","birthDate","today","birth","age","getFullYear","monthDiff","getMonth","getDate"],"sources":["C:/Users/invite/Documents/servicescppf/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Configuration de base de l'API\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\r\nconst WEB_BASE_URL = process.env.REACT_APP_WEB_URL || 'http://localhost:8000'; // Nouvelle variable\r\n\r\n// Créer une instance axios\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  withCredentials: true,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n    'X-Requested-With': 'XMLHttpRequest',\r\n  },\r\n});\r\n\r\n// Variable pour tracker si le CSRF cookie a été récupéré\r\nlet csrfInitialized = false;\r\n\r\n// Fonction pour initialiser le CSRF token\r\nconst initializeCsrf = async () => {\r\n  if (csrfInitialized) return;\r\n  \r\n  try {\r\n    await axios.get(`${WEB_BASE_URL}/sanctum/csrf-cookie`, {\r\n      withCredentials: true\r\n    });\r\n    csrfInitialized = true;\r\n  } catch (error) {\r\n    console.error('Erreur CSRF initialization:', error);\r\n    // Ne pas bloquer si le CSRF échoue\r\n  }\r\n};\r\n\r\n// Intercepteur pour ajouter le token d'authentification\r\napi.interceptors.request.use(\r\n  async (config) => {\r\n    // Initialiser CSRF pour les requêtes POST/PUT/DELETE\r\n    if (['post', 'put', 'delete', 'patch'].includes(config.method?.toLowerCase())) {\r\n      await initializeCsrf();\r\n    }\r\n\r\n    const token = localStorage.getItem('auth_token') || localStorage.getItem('setup_token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Intercepteur pour gérer les réponses et erreurs\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Gestion des erreurs d'authentification\r\n    if (error.response?.status === 401) {\r\n      // Token expiré ou invalide\r\n      localStorage.removeItem('auth_token');\r\n      localStorage.removeItem('setup_token');\r\n      localStorage.removeItem('user_data');\r\n      \r\n      // Rediriger vers la page de connexion si on n'y est pas déjà\r\n      if (!window.location.pathname.includes('/login')) {\r\n        window.location.href = '/services';\r\n      }\r\n    }\r\n\r\n    // Gestion des erreurs CSRF (419)\r\n    if (error.response?.status === 419) {\r\n      console.log('Erreur CSRF, réinitialisation...');\r\n      csrfInitialized = false;\r\n      // Optionnel : retry automatique de la requête\r\n    }\r\n\r\n    // Gestion des erreurs de validation (422)\r\n    if (error.response?.status === 422) {\r\n      console.error('Erreurs de validation:', error.response.data.errors);\r\n    }\r\n\r\n    // Gestion des erreurs serveur (500)\r\n    if (error.response?.status >= 500) {\r\n      console.error('Erreur serveur:', error.response.data);\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Services d'authentification (reste identique mais avec les bonnes routes)\r\nexport const authService = {\r\n  // Première connexion pour les agents actifs\r\n  firstLoginActifs: (data) => api.post('/auth/first-login/actifs', data),\r\n  \r\n  // Première connexion pour les retraités\r\n  firstLoginRetraites: (data) => api.post('/auth/first-login/retraites', data),\r\n  \r\n  // Configuration du profil après première connexion\r\n  setupProfile: (data) => api.post('/auth/setup-profile', data),\r\n  \r\n  // Connexion standard\r\n  standardLogin: (data) => api.post('/auth/standard-login', data),\r\n  \r\n  // Déconnexion\r\n  logout: () => api.post('/auth/logout'),\r\n  \r\n  // Vérifier le token\r\n  verifyToken: () => api.get('/auth/verify'),\r\n  \r\n  // Obtenir les informations de l'utilisateur connecté\r\n  getCurrentUser: () => api.get('/auth/user'),\r\n\r\n  // CORRECTION : Routes auth pour la vérification pendant le setup\r\n  verifyPhone: (data) => api.post('/auth/verify-phone-setup', data),\r\n  resendVerification: () => api.post('/auth/resend-verification-setup')\r\n  \r\n};\r\n\r\n// Services utilisateur\r\nexport const userService = {\r\n  // Obtenir le profil utilisateur\r\n  getProfile: () => api.get('/user/profile'),\r\n  \r\n  // Mettre à jour le profil\r\n  updateProfile: (data) => api.put('/user/profile', data),\r\n  \r\n  // Changer le mot de passe\r\n  changePassword: (data) => api.put('/user/password', data),\r\n};\r\n\r\n// Services pour les agents actifs\r\nexport const agentService = {\r\n  // Obtenir le dashboard\r\n  getDashboard: () => api.get('/agent/dashboard'),\r\n  \r\n  // Obtenir les attestations\r\n  getAttestations: () => api.get('/agent/attestations'),\r\n  \r\n  // Demander une attestation\r\n  requestAttestation: (data) => api.post('/agent/attestations', data),\r\n  \r\n  // Obtenir les prestations familiales\r\n  getPrestations: () => api.get('/agent/prestations'),\r\n  \r\n  // Obtenir l'historique des cotisations\r\n  getCotisations: () => api.get('/agent/cotisations'),\r\n};\r\n\r\n// Services pour les retraités\r\nexport const retraiteService = {\r\n  // Obtenir le dashboard\r\n  getDashboard: () => api.get('/retraite/dashboard'),\r\n  \r\n  // Obtenir les informations de pension\r\n  getPensionInfo: () => api.get('/retraite/pension'),\r\n  \r\n  // Obtenir les certificats de vie\r\n  getCertificatsVie: () => api.get('/retraite/certificats-vie'),\r\n  \r\n  // Soumettre un certificat de vie\r\n  submitCertificatVie: (data) => api.post('/retraite/certificats-vie', data),\r\n  \r\n  // Obtenir l'historique professionnel\r\n  getHistorique: () => api.get('/retraite/historique'),\r\n};\r\n\r\n// Utilitaires\r\nexport const utils = {\r\n  // Formater les erreurs de validation\r\n  formatValidationErrors: (errors) => {\r\n    const formattedErrors = {};\r\n    for (const field in errors) {\r\n      formattedErrors[field] = errors[field][0]; // Prendre le premier message d'erreur\r\n    }\r\n    return formattedErrors;\r\n  },\r\n  \r\n  // Vérifier si l'utilisateur est connecté\r\n  isAuthenticated: () => {\r\n    const token = localStorage.getItem('auth_token');\r\n    return !!token;\r\n  },\r\n  \r\n  // Obtenir les données utilisateur stockées\r\n  getUserData: () => {\r\n    const userData = localStorage.getItem('user_data');\r\n    return userData ? JSON.parse(userData) : null;\r\n  },\r\n  \r\n  // Stocker les données utilisateur\r\n  setUserData: (userData) => {\r\n    localStorage.setItem('user_data', JSON.stringify(userData));\r\n  },\r\n  \r\n  // Nettoyer les données de session\r\n  clearSession: () => {\r\n    localStorage.removeItem('auth_token');\r\n    localStorage.removeItem('setup_token');\r\n    localStorage.removeItem('user_data');\r\n  },\r\n  \r\n  // Formater les numéros de téléphone\r\n  formatPhoneNumber: (phone) => {\r\n    if (!phone) return '';\r\n    // Supprimer tous les caractères non numériques\r\n    const cleaned = phone.replace(/\\D/g, '');\r\n    // Ajouter l'indicatif +241 si nécessaire\r\n    if (cleaned.length === 8 || cleaned.length === 9) {\r\n      return `+241${cleaned}`;\r\n    }\r\n    return phone;\r\n  },\r\n  \r\n  // Valider le format du matricule solde\r\n  validateMatriculeSolde: (matricule) => {\r\n    return /^[0-9]{6}[A-Z]$/.test(matricule);\r\n  },\r\n  \r\n  // Valider le format du numéro de pension\r\n  validateNumeroPension: (numero) => {\r\n    return /^[0-9]+$/.test(numero);\r\n  },\r\n  \r\n  // Formater les montants en FCFA\r\n  formatCurrency: (amount) => {\r\n    if (!amount) return '0 FCFA';\r\n    return new Intl.NumberFormat('fr-FR', {\r\n      style: 'currency',\r\n      currency: 'XAF',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    }).format(amount).replace('XAF', 'FCFA');\r\n  },\r\n  \r\n  // Formater les dates\r\n  formatDate: (date) => {\r\n    if (!date) return '';\r\n    return new Date(date).toLocaleDateString('fr-FR', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n    });\r\n  },\r\n  \r\n  // Calculer l'âge\r\n  calculateAge: (birthDate) => {\r\n    if (!birthDate) return 0;\r\n    const today = new Date();\r\n    const birth = new Date(birthDate);\r\n    let age = today.getFullYear() - birth.getFullYear();\r\n    const monthDiff = today.getMonth() - birth.getMonth();\r\n    \r\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {\r\n      age--;\r\n    }\r\n    \r\n    return age;\r\n  }\r\n};\r\n\r\n// Export par défaut\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}